// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// fastBMA_g
const List fastBMA_g(NumericMatrix x, int nTimePoints, NumericMatrix priorProbs_, double oddsRatio, int nVars, double g, CharacterVector geneNames, int start, int end, int nThreads, int optimizeBits, int maxOptimizeCycles, bool timeSeries, bool rankOnly, bool noPrune, double edgeMin, double edgeTol, double pruneFilterMin, double timeout);
RcppExport SEXP networkBMA_fastBMA_g(SEXP xSEXP, SEXP nTimePointsSEXP, SEXP priorProbs_SEXP, SEXP oddsRatioSEXP, SEXP nVarsSEXP, SEXP gSEXP, SEXP geneNamesSEXP, SEXP startSEXP, SEXP endSEXP, SEXP nThreadsSEXP, SEXP optimizeBitsSEXP, SEXP maxOptimizeCyclesSEXP, SEXP timeSeriesSEXP, SEXP rankOnlySEXP, SEXP noPruneSEXP, SEXP edgeMinSEXP, SEXP edgeTolSEXP, SEXP pruneFilterMinSEXP, SEXP timeoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type nTimePoints(nTimePointsSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type priorProbs_(priorProbs_SEXP);
    Rcpp::traits::input_parameter< double >::type oddsRatio(oddsRatioSEXP);
	Rcpp::traits::input_parameter< int >::type nVars(nVarsSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type geneNames(geneNamesSEXP);
	Rcpp::traits::input_parameter< int >::type start(startSEXP);
	Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< int >::type nThreads(nThreadsSEXP);
    Rcpp::traits::input_parameter< int >::type optimizeBits(optimizeBitsSEXP);
    Rcpp::traits::input_parameter< int >::type maxOptimizeCycles(maxOptimizeCyclesSEXP);
    Rcpp::traits::input_parameter< bool >::type timeSeries(timeSeriesSEXP);
    Rcpp::traits::input_parameter< bool >::type rankOnly(rankOnlySEXP);
    Rcpp::traits::input_parameter< bool >::type noPrune(noPruneSEXP);
    Rcpp::traits::input_parameter< double >::type edgeMin(edgeMinSEXP);
    Rcpp::traits::input_parameter< double >::type edgeTol(edgeTolSEXP);
	Rcpp::traits::input_parameter< double >::type pruneFilterMin(pruneFilterMinSEXP);
	Rcpp::traits::input_parameter< double >::type timeout(timeoutSEXP);
    __result = Rcpp::wrap(fastBMA_g(x, nTimePoints, priorProbs_, oddsRatio, nVars, g, geneNames, start, end, nThreads, optimizeBits, maxOptimizeCycles, timeSeries, rankOnly, noPrune, edgeMin, edgeTol, pruneFilterMin, timeout));
    return __result;
END_RCPP
}
// ScanBMA_BIC
const List ScanBMA_BIC(NumericVector y, NumericMatrix x, NumericVector priorProbs_, double oddsRatio);
RcppExport SEXP networkBMA_ScanBMA_BIC(SEXP ySEXP, SEXP xSEXP, SEXP priorProbs_SEXP, SEXP oddsRatioSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type priorProbs_(priorProbs_SEXP);
    Rcpp::traits::input_parameter< double >::type oddsRatio(oddsRatioSEXP);
    __result = Rcpp::wrap(ScanBMA_BIC(y, x, priorProbs_, oddsRatio));
    return __result;
END_RCPP
}
// BMA_Diff_BIC
const List BMA_Diff_BIC(NumericVector y, NumericMatrix x, NumericVector priorProbs_, IntegerVector bestModel, bool diff100, bool diff0, IntegerVector pred100, IntegerVector pred0, double minprob, double epsilon);
RcppExport SEXP networkBMA_BMA_Diff_BIC(SEXP ySEXP, SEXP xSEXP, SEXP priorProbs_SEXP, SEXP bestModelSEXP, SEXP diff100SEXP, SEXP diff0SEXP, SEXP pred100SEXP, SEXP pred0SEXP, SEXP minprobSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type priorProbs_(priorProbs_SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type bestModel(bestModelSEXP);
    Rcpp::traits::input_parameter< bool >::type diff100(diff100SEXP);
    Rcpp::traits::input_parameter< bool >::type diff0(diff0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pred100(pred100SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pred0(pred0SEXP);
    Rcpp::traits::input_parameter< double >::type minprob(minprobSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    __result = Rcpp::wrap(BMA_Diff_BIC(y, x, priorProbs_, bestModel, diff100, diff0, pred100, pred0, minprob, epsilon));
    return __result;
END_RCPP
}
// ScanBMA_g
const List ScanBMA_g(NumericVector y, NumericMatrix x, NumericVector priorProbs_, double oddsRatio, double g);
RcppExport SEXP networkBMA_ScanBMA_g(SEXP ySEXP, SEXP xSEXP, SEXP priorProbs_SEXP, SEXP oddsRatioSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type priorProbs_(priorProbs_SEXP);
    Rcpp::traits::input_parameter< double >::type oddsRatio(oddsRatioSEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    __result = Rcpp::wrap(ScanBMA_g(y, x, priorProbs_, oddsRatio, g));
    return __result;
END_RCPP
}
// BMA_Diff_g
const List BMA_Diff_g(NumericVector y, NumericMatrix x, NumericVector priorProbs_, double g, IntegerVector bestModel, bool diff100, bool diff0, IntegerVector pred100, IntegerVector pred0, double minprob, double epsilon);
RcppExport SEXP networkBMA_BMA_Diff_g(SEXP ySEXP, SEXP xSEXP, SEXP priorProbs_SEXP, SEXP gSEXP, SEXP bestModelSEXP, SEXP diff100SEXP, SEXP diff0SEXP, SEXP pred100SEXP, SEXP pred0SEXP, SEXP minprobSEXP, SEXP epsilonSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type priorProbs_(priorProbs_SEXP);
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type bestModel(bestModelSEXP);
    Rcpp::traits::input_parameter< bool >::type diff100(diff100SEXP);
    Rcpp::traits::input_parameter< bool >::type diff0(diff0SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pred100(pred100SEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pred0(pred0SEXP);
    Rcpp::traits::input_parameter< double >::type minprob(minprobSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    __result = Rcpp::wrap(BMA_Diff_g(y, x, priorProbs_, g, bestModel, diff100, diff0, pred100, pred0, minprob, epsilon));
    return __result;
END_RCPP
}
